{
  "uid" : "9d73ada504b45dc6",
  "name" : "test_001",
  "fullName" : "Test.test39.Test#test_001",
  "historyId" : "5621fe914dcc36a5860b025d48a8bb05",
  "time" : {
    "start" : 1749933572538,
    "stop" : 1749933579590,
    "duration" : 7052
  },
  "description" : "Caso de prueba para verificar el</br>\nlogin y </br>\nregistro en el aplicativo web de pruebas",
  "descriptionHtml" : "<p>Caso de prueba para verificar el</br>\nlogin y </br>\nregistro en el aplicativo web de pruebas</p>\n",
  "status" : "broken",
  "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\dmefr\\\\OneDrive\\\\Escritorio\\\\FW_Pruebas_Python_Selenium_VSCode\\\\EnviromentQA\\\\src\\\\Data\\\\Pruebas1.xlsx'",
  "statusTrace" : "self = <src.Test.test39.Test testMethod=test_001>\n\n    def test_001(self):\n        with allure.step(u'Paso 2: Ir al sitio de la aplicacion de pruebas'):\n            Selenium.get_url_driver(self,\"https://opencart.abstracta.us/index.php?route=account/register\")\n    \n        with allure.step(u'Paso 3: Ingresar datos en el campo First Name del formulario de registro'):\n            Selenium.esperar_elemento(self)\n>           Selenium.escribir_texto(self, 'First_Name', Selenium.leer_celda (self, 'C3', 'Datos Pruebas'))\n                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTest\\test39.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nFunction\\Functions.py:552: in leer_celda\n    wb = openpyxl.load_workbook(Inicializar.Excel_Leer_Escribir)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\Lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n..\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n                   ^^^^^^^^^^^^^^^^^^^^^\n..\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\n              ^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'C:\\\\Users\\\\dmefr\\\\OneDrive\\\\Escritorio\\\\FW_Pruebas_Python_Selenium_VSCode\\\\EnviromentQA\\\\src\\\\Data\\\\Pruebas1.xlsx', mode = 'r'\ncompression = 0, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\n                              ^^^^^^^^^^^^^^^^^^^^^^^\nE                   FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\dmefr\\\\OneDrive\\\\Escritorio\\\\FW_Pruebas_Python_Selenium_VSCode\\\\EnviromentQA\\\\src\\\\Data\\\\Pruebas1.xlsx'\n\nC:\\Python\\Lib\\zipfile\\__init__.py:1367: FileNotFoundError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_unittest_setUpClass_fixture_Test",
    "time" : {
      "start" : 1749933572537,
      "stop" : 1749933572537,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "description" : "Caso de prueba para verificar el</br>\nlogin y </br>\nregistro en el aplicativo web de pruebas",
    "status" : "broken",
    "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\dmefr\\\\OneDrive\\\\Escritorio\\\\FW_Pruebas_Python_Selenium_VSCode\\\\EnviromentQA\\\\src\\\\Data\\\\Pruebas1.xlsx'",
    "statusTrace" : "self = <src.Test.test39.Test testMethod=test_001>\n\n    def test_001(self):\n        with allure.step(u'Paso 2: Ir al sitio de la aplicacion de pruebas'):\n            Selenium.get_url_driver(self,\"https://opencart.abstracta.us/index.php?route=account/register\")\n    \n        with allure.step(u'Paso 3: Ingresar datos en el campo First Name del formulario de registro'):\n            Selenium.esperar_elemento(self)\n>           Selenium.escribir_texto(self, 'First_Name', Selenium.leer_celda (self, 'C3', 'Datos Pruebas'))\n                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTest\\test39.py:26: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nFunction\\Functions.py:552: in leer_celda\n    wb = openpyxl.load_workbook(Inicializar.Excel_Leer_Escribir)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\Lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n..\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n                   ^^^^^^^^^^^^^^^^^^^^^\n..\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\n              ^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'C:\\\\Users\\\\dmefr\\\\OneDrive\\\\Escritorio\\\\FW_Pruebas_Python_Selenium_VSCode\\\\EnviromentQA\\\\src\\\\Data\\\\Pruebas1.xlsx', mode = 'r'\ncompression = 0, allowZip64 = True, compresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\n                              ^^^^^^^^^^^^^^^^^^^^^^^\nE                   FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\dmefr\\\\OneDrive\\\\Escritorio\\\\FW_Pruebas_Python_Selenium_VSCode\\\\EnviromentQA\\\\src\\\\Data\\\\Pruebas1.xlsx'\n\nC:\\Python\\Lib\\zipfile\\__init__.py:1367: FileNotFoundError",
    "steps" : [ {
      "name" : "Paso 1: Abrir el navegador y obtener el archivo JSON",
      "time" : {
        "start" : 1749933572538,
        "stop" : 1749933574842,
        "duration" : 2304
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "Paso 2: Ir al sitio de la aplicacion de pruebas",
      "time" : {
        "start" : 1749933574843,
        "stop" : 1749933576396,
        "duration" : 1553
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    }, {
      "name" : "Paso 3: Ingresar datos en el campo First Name del formulario de registro",
      "time" : {
        "start" : 1749933576396,
        "stop" : 1749933577397,
        "duration" : 1001
      },
      "status" : "broken",
      "statusMessage" : "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\Users\\\\dmefr\\\\OneDrive\\\\Escritorio\\\\FW_Pruebas_Python_Selenium_VSCode\\\\EnviromentQA\\\\src\\\\Data\\\\Pruebas1.xlsx'\n",
      "statusTrace" : "  File \"C:\\Users\\dmefr\\OneDrive\\Escritorio\\FW_Pruebas_Python_Selenium_VSCode\\EnviromentQA\\src\\Test\\test39.py\", line 26, in test_001\n    Selenium.escribir_texto(self, 'First_Name', Selenium.leer_celda (self, 'C3', 'Datos Pruebas'))\n                                                ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\dmefr\\OneDrive\\Escritorio\\FW_Pruebas_Python_Selenium_VSCode\\EnviromentQA\\src\\Function\\Functions.py\", line 552, in leer_celda\n    wb = openpyxl.load_workbook(Inicializar.Excel_Leer_Escribir)\n  File \"C:\\Users\\dmefr\\OneDrive\\Escritorio\\FW_Pruebas_Python_Selenium_VSCode\\EnviromentQA\\Lib\\site-packages\\openpyxl\\reader\\excel.py\", line 346, in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n                         data_only, keep_links, rich_text)\n  File \"C:\\Users\\dmefr\\OneDrive\\Escritorio\\FW_Pruebas_Python_Selenium_VSCode\\EnviromentQA\\Lib\\site-packages\\openpyxl\\reader\\excel.py\", line 123, in __init__\n    self.archive = _validate_archive(fn)\n                   ~~~~~~~~~~~~~~~~~^^^^\n  File \"C:\\Users\\dmefr\\OneDrive\\Escritorio\\FW_Pruebas_Python_Selenium_VSCode\\EnviromentQA\\Lib\\site-packages\\openpyxl\\reader\\excel.py\", line 95, in _validate_archive\n    archive = ZipFile(filename, 'r')\n  File \"C:\\Python\\Lib\\zipfile\\__init__.py\", line 1367, in __init__\n    self.fp = io.open(file, filemode)\n              ~~~~~~~^^^^^^^^^^^^^^^^\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : true,
      "shouldDisplayMessage" : true,
      "attachmentsCount" : 0
    }, {
      "name" : "Paso 7: Cerrar instancia del navegador",
      "time" : {
        "start" : 1749933577413,
        "stop" : 1749933579590,
        "duration" : 2177
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "stepsCount" : 0,
      "hasContent" : false,
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0
    } ],
    "attachments" : [ {
      "uid" : "6d9bb9e61a40c43",
      "name" : "stdout",
      "source" : "6d9bb9e61a40c43.txt",
      "type" : "text/plain",
      "size" : 6201
    } ],
    "parameters" : [ ],
    "stepsCount" : 4,
    "hasContent" : true,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "_unittest_setUpClass_fixture_Test::0",
    "time" : {
      "start" : 1749933586361,
      "stop" : 1749933586361,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "hasContent" : false,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "feature",
    "value" : "Pruebas"
  }, {
    "name" : "severity",
    "value" : "critical"
  }, {
    "name" : "story",
    "value" : "Realizar Registro y Login"
  }, {
    "name" : "parentSuite",
    "value" : "Test"
  }, {
    "name" : "suite",
    "value" : "test39"
  }, {
    "name" : "subSuite",
    "value" : "Test"
  }, {
    "name" : "host",
    "value" : "Efrain-CD"
  }, {
    "name" : "thread",
    "value" : "19876-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "Test.test39"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ {
    "name" : "Test Case",
    "url" : "Test Case",
    "type" : "tms"
  } ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "9d73ada504b45dc6.json",
  "parameterValues" : [ ]
}